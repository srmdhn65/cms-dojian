{"version":3,"file":"static/js/425.41e21479.chunk.js","mappings":"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","sources":["pages/uikit/RangeSliders.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Row, Col, Card } from \"react-bootstrap\";\nimport Nouislider from \"nouislider-react\";\nimport \"nouislider/distribute/nouislider.css\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\n\ninterface SelectedValsType {\n  [key: number]: { textValue: number; percent: number };\n}\n\ninterface SelectedRangesType {\n  [key: number]: string;\n}\n\n// RangeSliders\nconst RangeSliders = () => {\n  const [selectedVals, setSelectedVals] = useState<SelectedValsType>({\n    1: { textValue: 20, percent: 20 },\n    2: { textValue: 20, percent: 20 },\n  });\n  const [selectedRanges, setSelectedRanges] = useState<SelectedRangesType>({\n    1: \"20-45\",\n    2: \"20-45\",\n  });\n\n  const onSlide = (index: number, value: any[], percent: any) => {\n    let selectedValues = { ...selectedVals };\n    selectedValues[index] = {\n      textValue: value[0].toFixed(2),\n      percent: percent[0].toFixed(2),\n    };\n    setSelectedVals(selectedValues);\n  };\n\n  const onSlide2 = (index: number, value: any[]) => {\n    let selectedRange = { ...selectedRanges };\n    selectedRange[index] = value[0].toFixed(2) + \"-\" + value[1].toFixed(2);\n    setSelectedRanges(selectedRange);\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Extended UI\", path: \"/extended-ui/rangesliders\" },\n          {\n            label: \"Range Slider\",\n            path: \"/extended-ui/rangesliders\",\n            active: true,\n          },\n        ]}\n        title={\"Range Slider\"}\n      />\n\n      <Row>\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Single</h4>\n              <p className=\"text-muted font-14\">Slider with single selecrtor</p>\n\n              <Nouislider\n                range={{ min: 0, max: 100 }}\n                start={[20]}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide(1, value, percent)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedVals ? (\n                  <span>\n                    {selectedVals[1][\"textValue\"]}, &nbsp;\n                    {selectedVals[1][\"percent\"]}%\n                  </span>\n                ) : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Range</h4>\n              <p className=\"text-muted font-14\">Slider with range selecrtor</p>\n\n              <Nouislider\n                range={{ min: 10, max: 150 }}\n                start={[20, 45]}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide2(1, value)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedRanges ? <span>{selectedRanges[1]}</span> : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Slider Step</h4>\n              <p className=\"text-muted font-14\">Slider with step value</p>\n\n              <Nouislider\n                range={{ min: 0, max: 100 }}\n                start={[20]}\n                step={10}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide(2, value, percent)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedVals ? (\n                  <span>\n                    {selectedVals[2][\"textValue\"]}, &nbsp;\n                    {selectedVals[2][\"percent\"]}%\n                  </span>\n                ) : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n\n        <Col xl={6}>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Range Slider with Steps</h4>\n              <p className=\"text-muted font-14\">\n                Slider with range selecrtor with fixed step value\n              </p>\n\n              <Nouislider\n                range={{ min: 10, max: 150 }}\n                start={[20, 45]}\n                step={15}\n                connect\n                onSlide={(render, handle, value, un, percent) =>\n                  onSlide2(2, value)\n                }\n              />\n              <p className=\"mt-2 mb-0\">\n                Value:{\" \"}\n                {selectedRanges ? <span>{selectedRanges[2]}</span> : null}\n              </p>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default RangeSliders;\n"],"names":["RangeSliders","selectedVals","setSelectedVals","useState","textValue","percent","selectedRanges","setSelectedRanges","onSlide","index","value","selectedValues","_objectSpread","toFixed","onSlide2","selectedRange","_jsxs","_Fragment","children","_jsx","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","xl","Card","Body","className","Nouislider","range","min","max","start","connect","render","handle","un","step"],"sourceRoot":""}