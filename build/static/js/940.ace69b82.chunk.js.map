{"version":3,"file":"static/js/940.ace69b82.chunk.js","mappings":"4PAmBA,MAAMA,EAAmBA,KACvB,MAOMC,GACJC,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACC,GAAG,oBAAmBC,UAC7BH,EAAAA,EAAAA,KAACC,EAAAA,EAAQG,KAAI,CAAAD,SAAC,kEAMlB,OACEH,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAF,UACHG,EAAAA,EAAAA,MAACD,EAAAA,EAAKD,KAAI,CAAAD,SAAA,EACRH,EAAAA,EAAAA,KAAA,MAAIO,UAAU,eAAcJ,SAAC,cAC7BH,EAAAA,EAAAA,KAAA,KAAGO,UAAU,aAAYJ,SAAC,8GAnBK,CACnC,CAAEK,UAAW,OACb,CAAEA,UAAW,UACb,CAAEA,UAAW,SACb,CAAEA,UAAW,UAoBO,IAAIC,KAAKC,IACvBV,EAAAA,EAAAA,KAACW,EAAAA,EAAc,CACbC,QAAQ,QAERJ,UAAWE,EAAKF,UAChBK,SACEb,EAAAA,EAAAA,KAACC,EAAAA,EAAO,CAACa,QAAM,EAACZ,GAAE,sBAAAa,OAAwBL,EAAKF,WAAYL,UACzDH,EAAAA,EAAAA,KAACC,EAAAA,EAAQG,KAAI,CAAAD,SAAC,gEAIjBA,UAEDG,EAAAA,EAAAA,MAACU,EAAAA,EAAM,CAACC,QAAQ,QAAQV,UAAU,OAAMJ,SAAA,CAAC,cAC3BO,EAAKF,cAXdE,EAAKF,cAgBdR,EAAAA,EAAAA,KAACW,EAAAA,EAAc,CAACC,QAAQ,QAAQJ,UAAU,QAAQK,QAASd,EAAQI,UACjEH,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CAAAb,SAAC,8BAGP,EAILe,EAAmBA,KASrBZ,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAAhB,SAAA,EACEH,EAAAA,EAAAA,KAAA,MAAIO,UAAU,eAAcJ,SAAC,qBAC7BH,EAAAA,EAAAA,KAAA,KAAGO,UAAU,qBAAoBJ,SAAC,uEAVD,CACnC,CAAEK,UAAW,OACb,CAAEA,UAAW,UACb,CAAEA,UAAW,SACb,CAAEA,UAAW,UAUK,IAAIC,KAAKC,IACvBV,EAAAA,EAAAA,KAACW,EAAAA,EAAc,CAEbH,UAAWE,EAAKF,UAChBK,SACEP,EAAAA,EAAAA,MAACc,EAAAA,EAAO,CAAClB,GAAE,WAAAa,OAAaL,EAAKF,WAAYL,SAAA,CAAC,eAC7BH,EAAAA,EAAAA,KAAA,UAAAG,SAASO,EAAKF,YAAmB,OAE/CL,UAEDG,EAAAA,EAAAA,MAACU,EAAAA,EAAM,CAACC,QAAQ,QAAQV,UAAU,OAAMJ,SAAA,CAAC,cAC3BO,EAAKF,cATdE,EAAKF,gBAmDpB,EAlCyBa,KAErBf,EAAAA,EAAAA,MAACgB,EAAAA,SAAc,CAAAnB,SAAA,EACbH,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,CACRC,gBAAiB,CACf,CAAEC,MAAO,UAAWC,KAAM,yBAC1B,CACED,MAAO,sBACPC,KAAM,wBACNC,QAAQ,IAGZC,MAAO,yBAGT5B,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAA1B,UACFH,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAAA3B,UACFH,EAAAA,EAAAA,KAACF,EAAgB,SAIrBE,EAAAA,EAAAA,KAAC6B,EAAAA,EAAG,CAAA1B,UACFH,EAAAA,EAAAA,KAAC8B,EAAAA,EAAG,CAAA3B,UACFH,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAF,UACHH,EAAAA,EAAAA,KAACK,EAAAA,EAAKD,KAAI,CAAAD,UACRH,EAAAA,EAAAA,KAACkB,EAAgB,c","sources":["pages/uikit/TooltipsPopovers.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  OverlayTrigger,\n  Tooltip,\n  Button,\n  Popover,\n  OverlayProps,\n} from \"react-bootstrap\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\n\ninterface DirectionsType {\n  placement: OverlayProps[\"placement\"];\n}\n\nconst PopoverDirection = () => {\n  const directions: DirectionsType[] = [\n    { placement: \"top\" },\n    { placement: \"bottom\" },\n    { placement: \"right\" },\n    { placement: \"left\" },\n  ];\n\n  const popover = (\n    <Popover id=\"popover-direction\">\n      <Popover.Body>\n        And here's some amazing content. It's very engaging. Right?\n      </Popover.Body>\n    </Popover>\n  );\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Popovers</h4>\n        <p className=\"sub-header\">\n          Add small overlays of content, like those on the iPad, to any element\n          for housing secondary information.\n        </p>\n\n        {(directions || []).map((item) => (\n          <OverlayTrigger\n            trigger=\"click\"\n            key={item.placement}\n            placement={item.placement}\n            overlay={\n              <Popover popper id={`popover-positioned-${item.placement}`}>\n                <Popover.Body>\n                  Vivamus sagittis lacus vel augue laoreet rutrum faucibus.\n                </Popover.Body>\n              </Popover>\n            }\n          >\n            <Button variant=\"light\" className=\"me-1\">\n              Popover on {item.placement}\n            </Button>\n          </OverlayTrigger>\n        ))}\n\n        <OverlayTrigger trigger=\"focus\" placement=\"right\" overlay={popover}>\n          <Button>Dismissible popover</Button>\n        </OverlayTrigger>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst TooltipDirection = () => {\n  const directions: DirectionsType[] = [\n    { placement: \"top\" },\n    { placement: \"bottom\" },\n    { placement: \"right\" },\n    { placement: \"left\" },\n  ];\n\n  return (\n    <>\n      <h4 className=\"header-title\">Four Directions</h4>\n      <p className=\"text-muted font-14\">\n        Four options are available: top, right, bottom, and left aligned.\n      </p>\n\n      {(directions || []).map((item) => (\n        <OverlayTrigger\n          key={item.placement}\n          placement={item.placement}\n          overlay={\n            <Tooltip id={`tooltip-${item.placement}`}>\n              Tooltip on <strong>{item.placement}</strong>.\n            </Tooltip>\n          }\n        >\n          <Button variant=\"light\" className=\"me-1\">\n            Tooltip on {item.placement}\n          </Button>\n        </OverlayTrigger>\n      ))}\n    </>\n  );\n};\n\nconst TooltipsPopovers = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Base UI\", path: \"/ui/tooltips-popovers\" },\n          {\n            label: \"Tooltips & Popovers\",\n            path: \"/ui/tooltips-popovers\",\n            active: true,\n          },\n        ]}\n        title={\"Tooltips & Popovers\"}\n      />\n\n      <Row>\n        <Col>\n          <PopoverDirection />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <TooltipDirection />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default TooltipsPopovers;\n"],"names":["PopoverDirection","popover","_jsx","Popover","id","children","Body","Card","_jsxs","className","placement","map","item","OverlayTrigger","trigger","overlay","popper","concat","Button","variant","TooltipDirection","_Fragment","Tooltip","TooltipsPopovers","React","PageTitle","breadCrumbItems","label","path","active","title","Row","Col"],"sourceRoot":""}