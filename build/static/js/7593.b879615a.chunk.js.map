{"version":3,"file":"static/js/7593.b879615a.chunk.js","mappings":"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","sources":["components/Spinner.tsx","pages/uikit/Spinners.tsx"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\ninterface SpinnerProps {\n  tag?: string;\n  className?: string;\n  size?: \"lg\" | \"md\" | \"sm\";\n  type?: \"bordered\" | \"grow\";\n  color?: string;\n  children?: any;\n}\n\n/**\n * Spinner\n */\nconst Spinner = (props: SpinnerProps) => {\n  const children = props.children || null;\n  const Tag: any = props.tag || \"div\";\n  const color = props.color || \"secondary\";\n  const size = props.size || \"\";\n\n  return (\n    <Tag\n      role=\"status\"\n      className={classNames(\n        {\n          \"spinner-border\": props.type === \"bordered\",\n          \"spinner-grow\": props.type === \"grow\",\n        },\n        [`text-${color}`],\n        { [`avatar-${size}`]: size },\n        props.className\n      )}\n    >\n      {children}\n    </Tag>\n  );\n};\n\nSpinner.defaultProps = {\n  tag: \"div\",\n  type: \"bordered\",\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\nimport Spinner from \"../../components/Spinner\";\n\nconst colors: string[] = [\n  \"primary\",\n  \"secondary\",\n  \"success\",\n  \"danger\",\n  \"warning\",\n  \"info\",\n  \"light\",\n  \"dark\",\n  \"blue\",\n  \"pink\",\n];\n\nconst BorderedSpinners = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"mt-0 header-title\">Border spinner</h4>\n        <p className=\"text-muted mb-4\">\n          Use the border spinners for a lightweight loading indicator.\n        </p>\n        <Spinner className=\"m-2\" />\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst GrowingSpinners = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"mt-0 header-title\">Growing spinner</h4>\n        <p className=\"text-muted mb-4\">\n          If you don’t fancy a border spinner, switch to the grow spinner. While\n          it doesn’t technically spin, it does repeatedly grow!\n        </p>\n        <Spinner type=\"grow\" />\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst Colors = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"mt-0 header-title\">Colors</h4>\n        <p className=\"text-muted mb-4\">\n          All standard visual variants are available for both animation styles\n          by setting the <code>variant</code> property.\n        </p>\n\n        {(colors || []).map((color, index) => {\n          return <Spinner key={index} className=\"m-2\" color={color} />;\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst ColorGrowingSpinners = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"mt-0 header-title\">Color Growing spinner</h4>\n        <p className=\"text-muted mb-4\">\n          Here it is in blue, along with the supported variants.\n        </p>\n        {(colors || []).map((color, index) => {\n          return (\n            <Spinner key={index} className=\"m-2\" type=\"grow\" color={color} />\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst AlignmentSpinners = () => {\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"mt-0 header-title\">Alignment</h4>\n          <p className=\"text-muted mb-4\">\n            Use flexbox utilities, float utilities, or text alignment utilities\n            to place spinners exactly where you need them in any situation.\n          </p>\n          <div className=\"d-flex justify-content-center\">\n            <Spinner />\n          </div>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst SpinnerPlacements = () => {\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"mt-0 header-title\">Placement</h4>\n          <p className=\"text-muted mb-4\">\n            Use <code>flexbox utilities</code>, <code>float utilities</code>, or{\" \"}\n            <code>text alignment</code> utilities to place spinners exactly\n            where you need them in any situation.\n          </p>\n          <div className=\"d-flex align-items-center\">\n            <strong>Loading...</strong>\n            <Spinner className=\"ms-auto\" />\n          </div>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst SpinnersSizes = () => {\n  const sizes: (\"lg\" | \"md\" | \"sm\")[] = [\"lg\", \"md\", \"sm\"];\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"mt-0 header-title\">Size</h4>\n        <p className=\"text-muted mb-4\">\n          Add <code>size</code> attribute to make spinner with sizes including\n          lg, md or sm.\n        </p>\n        <div className=\"row\">\n          {(sizes || []).map((size, index) => {\n            return (\n              <div key={index} className=\"col-lg-6\">\n                <Spinner\n                  className=\"text-primary m-2\"\n                  color=\"primary\"\n                  size={size}\n                />\n                <Spinner\n                  className=\"text-secondary m-2\"\n                  type=\"grow\"\n                  size={size}\n                />\n              </div>\n            );\n          })}\n          <div className=\"col-lg-6\">\n            <Spinner className=\"spinner-border-sm m-2\" />\n            <Spinner type=\"grow\" className=\"spinner-grow-sm m-2\" />\n          </div>\n        </div>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst ButtonSpinners = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"mt-0 header-title\">Buttons spinner</h4>\n        <p className=\"text-muted mb-4\">\n          Use spinners within buttons to indicate an action is currently\n          processing or taking place. You may also swap the text out of the\n          spinner element and utilize button text as needed.\n        </p>\n        <Row>\n          <Col md={6}>\n            <div className=\"button-list mb-1 mb-sm-0\">\n              <Button color=\"primary\" disabled>\n                <Spinner\n                  className=\"spinner-border-sm\"\n                  tag=\"span\"\n                  color=\"white\"\n                />\n                <span className=\"visually-hidden\">Loading...</span>\n              </Button>\n\n              <Button color=\"primary\" disabled>\n                <Spinner\n                  className=\"spinner-border-sm me-1\"\n                  tag=\"span\"\n                  color=\"white\"\n                />\n                Loading...\n              </Button>\n            </div>\n          </Col>\n          <Col md={6}>\n            <div className=\"button-list\">\n              <Button color=\"primary\" disabled>\n                <Spinner\n                  className=\"spinner-grow-sm\"\n                  tag=\"span\"\n                  color=\"white\"\n                  type=\"grow\"\n                />\n                <span className=\"visually-hidden\">Loading...</span>\n              </Button>\n\n              <Button color=\"primary\" disabled>\n                <Spinner\n                  className=\"spinner-grow-sm me-1\"\n                  tag=\"span\"\n                  color=\"white\"\n                  type=\"grow\"\n                />\n                Loading...\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst Spinners = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Base UI\", path: \"/ui/spinners\" },\n          { label: \"Spinners\", path: \"/ui/spinners\", active: true },\n        ]}\n        title={\"Spinners\"}\n      />\n\n      <Row>\n        <Col lg={6}>\n          <BorderedSpinners />\n        </Col>\n        <Col lg={6}>\n          <GrowingSpinners />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col xl={6}>\n          <Colors />\n        </Col>\n\n        <Col xl={6}>\n          <ColorGrowingSpinners />\n        </Col>\n      </Row>\n      <Row>\n        <Col lg={6}>\n          <AlignmentSpinners />\n        </Col>\n        <Col lg={6}>\n          <SpinnerPlacements />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <SpinnersSizes />\n        </Col>\n        <Col lg={6}>\n          <ButtonSpinners />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Spinners;\n"],"names":["Spinner","props","children","Tag","tag","color","size","_jsx","role","className","classNames","type","concat","defaultProps","colors","BorderedSpinners","Card","_jsxs","Body","GrowingSpinners","Colors","map","index","ColorGrowingSpinners","AlignmentSpinners","_Fragment","SpinnerPlacements","SpinnersSizes","ButtonSpinners","Row","Col","md","Button","disabled","Spinners","React","PageTitle","breadCrumbItems","label","path","active","title","lg","xl"],"sourceRoot":""}